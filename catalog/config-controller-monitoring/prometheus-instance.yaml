apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    iam.gke.io/gcp-service-account: gcp-service-account # kpt-set: ${gcp-service-account}
  name: prometheus-config-controller
  namespace: config-controller-monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus-config-controller
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus-config-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-config-controller
subjects:
- kind: ServiceAccount
  name: prometheus-config-controller
  namespace: config-controller-monitoring
---
# start a prometheus to scrape and store metrics
# we also inject the prometheus stackdriver sidecar here.
kind: Prometheus
apiVersion: monitoring.coreos.com/v1
metadata:
  name: prometheus-config-controller
  namespace: config-controller-monitoring
  labels:
    prometheus: config-controller
spec:
  serviceAccountName: prometheus-config-controller
  # specify the image to use the gcr.io internal version.
  image: "us-docker.pkg.dev/config-controller-monitoring/prometheus/prometheus:v2.30.3"
  version: "2.30.3"
  # could add 2 replicas for redundancy
  # replicas: 2
  serviceMonitorSelector:
    matchLabels:
      component: config-controller
  enableAdminAPI: false
  resources:
    requests:
      # this may have to be increased depending on the number of metrics stored in the cluster.
      memory: 400Mi
  # inject the stackdriver-prometheus sidecar, to pull the desired metrics.
  containers:
  - args:
      - "--stackdriver.project-id=project-id"  # kpt-set: --stackdriver.project-id=${project-id}
      - "--prometheus.wal-directory=/prometheus/wal"
      - "--stackdriver.kubernetes.cluster-name=cluster-name-placeholder"   # kpt-set: --stackdriver.kubernetes.cluster-name=${config-controller-instance-name}
    image: gcr.io/stackdriver-prometheus/stackdriver-prometheus-sidecar:0.8.0
    imagePullPolicy: Always
    name: sidecar
    ports:
    - containerPort: 9091
      name: sidecar
    volumeMounts:
    - mountPath: /prometheus
      name: prometheus-prometheus-config-controller-db
---
# A prometheus service is exposed for debugging purposes
# this can be accessed locally with port forwarding:
# kubectl -n config-controller-monitoring port-forward svc/prometheus-config-controller 9190
apiVersion: v1
kind: Service
metadata:
  name: prometheus-config-controller
  namespace: config-controller-monitoring
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: prometheus
    prometheus: config-controller